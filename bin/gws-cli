#!/usr/bin/env node
"use strict";

const inquirer = require('inquirer');
const fs = require('fs-extra');
const path = require("path");
const ora = require('ora');
const chalk = require('chalk');
const {globalLoader} = require('../utils/global-loader');
const shell = require('shelljs');
const log = console.log;

const rootPath = path.resolve(__dirname, "../");

const cwd = process.cwd();
// console.log(chalk.red(`[INFO] ${cwd}`));
// console.log(shell.pwd());
// console.log(__dirname);
// console.log(__filename);

/*
let name = process.argv[2];
let exec = require("child_process").exec;

let child = exec("echo hello " + name, function(err, stdout, stderr) {
  if (err) throw err;
  console.log(stdout);
});
*/

const promptList = [{
  type: 'input',
  message: '项目名称:',
  name: 'name',
  default: "website2018" // 默认值
},{
  type: 'input',
  message: '描述:',
  name: 'description',
  default: "" // 默认值
},{
  type: 'list',
  message: '模式选择:',
  name: 'pattern',
  choices: [
    "Simple",
    "Base"
  ],
  filter: function (val) { // 使用filter将回答变为小写
    return val.toLowerCase();
  }
},{
  type: 'confirm',
  message: '是否安装依赖:',
  name: 'watch'
},{
  type: "list",
  message: "选择包管理器",
  name: "npm",
  choices: [
    "npm",
    "cnpm",
    "yarn"
  ],
  when(answers) { // 当watch为true的时候才会提问当前问题
    return answers.watch
  }
}];

inquirer.prompt(promptList).then(answers => {
  globalLoader(`${rootPath}/src/${answers.pattern}/package.json`).then( async (result) => {
    const spinner = ora(`generate ${answers.name}...  `);
    spinner.start();

    let pa = Object.assign({}, result[0], answers);

    // 判断项目文件是否已存在
    if (fs.pathExistsSync(`${cwd}/${answers.name}`)) {
      log(`${chalk.red('[ERROR]')} ${chalk.blue.bold('[目录已存在]')} ${chalk.green(`${cwd}/${answers.name}`)}`);
      spinner.stop();
      return false;
    }

    //生成文件 修改gitignore
    await shell.cp('-R',`${rootPath}/src/${answers.pattern}/`, `${cwd}/${answers.name}`);
    await shell.cd(`${cwd}/${answers.name}`);
    await shell.mv(`${cwd}/${answers.name}/gitignore`,`${cwd}/${answers.name}/.gitignore`);

    // 写文件内容（如果文件不存在会创建一个文件）
    // 写入时会先入清空文件
    await fs.outputFile(`${cwd}/${answers.name}/package.json`, JSON.stringify(pa), err => {
      if (err) {
        throw err;
      }



      // 写入成功后读取测试
      fs.readFile(`${cwd}/${answers.name}/package.json`, 'utf-8', (err, data) => {
        if (err) {
          throw err;
        }
        // console.log('生成文件：', JSON.parse(data));

        // 安装包
        if (answers.watch) {//执行npm run build 命令
          log(chalk.blue(`\n${answers.npm} install...`));
        } else {
          log(`\n${chalk.cyan('[INFO]')} ${chalk.blue.bold('[未安装依赖请手动执行]')} ${chalk.green(`npm install`)}`);
        }

        if (answers.watch && shell.exec(`${answers.npm} install`, {silent:true}).code !== 0) {//执行npm run build 命令
          shell.echo(`Error: ${answers.npm} instll failed`);
          shell.exit(1);
        }

        spinner.stop();

        log(`${chalk.cyan('[INFO]')} ${chalk.blue.bold('[进入项目]')} ${chalk.green(`cd ${answers.name}`)}`);
        log(`${chalk.cyan('[INFO]')} ${chalk.blue.bold('[查看项目树]')} ${chalk.green('npm run tree')}`);
        log(`${chalk.cyan('[INFO]')} --------------------------------------------------------------------------------`);
        log(`${chalk.cyan('[INFO]')} ${chalk.blue.bold('[运行入口news/demo、启动mock环境]')} ${chalk.yellow('npm run start --ENTRY=news/demo --ENV=mock')}`);
        log(`${chalk.cyan('[INFO]')} ${chalk.blue.bold('[运行入口news/git、启动mock环境]')} ${chalk.yellow('npm run start --ENTRY=news/git --ENV=mock')}`);
        log(`${chalk.cyan('[INFO]')} --------------------------------------------------------------------------------`);

        log(`${chalk.cyan('[INFO]')} --------------------------------------------------------------------------------`);
        log(`${chalk.cyan('[INFO]')} ${chalk.blue.bold('[编译news/demo、启动test环境]')} ${chalk.yellow('npm run compile --ENTRY=news/demo --ENV=test')}`);
        log(`${chalk.cyan('[INFO]')} ${chalk.blue.bold('[启动http服务器、项目news/demo]')} ${chalk.yellow('npm run node:server --ENTRY=news/demo')}`);
        log(`${chalk.cyan('[INFO]')} --------------------------------------------------------------------------------`);
      });
    });
  });
});
